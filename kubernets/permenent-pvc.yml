############################################
# Postgres Persistent Volume and Claim
############################################


############################################
# Postgres Deployment & Service
############################################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      terminationGracePeriodSeconds: 30
      containers:
        - name: postgres
          image: postgres:15
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "mypassword"
            - name: POSTGRES_DB
              value: "my_first_db"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres"]
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP


############################################
# Backend Deployment & Service
############################################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  labels:
    app: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      initContainers:
        - name: wait-for-postgres
          image: busybox
          command:
            - sh
            - -c
            - |
              echo "Waiting 5 seconds before checking Postgres..."
              sleep 5
              until nc -z postgres-service 5432; do
                echo "Waiting for Postgres..."
                sleep 2
              done
              echo "Postgres is ready!"
      containers:
        - name: backend
          image: 1234suhas/todo-my-backed-333:latest
          ports:
            - containerPort: 8000
          env:
            - name: DATABASE_URL
              value: "postgresql://postgres:mypassword@postgres-service:5432/my_first_db"
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
            requests:
              memory: "256Mi"
              cpu: "250m"
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
    - port: 8000
      targetPort: 8000
      nodePort: 30080
  type: NodePort

############################################
# ConfigMap for Frontend Environment
############################################
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  REACT_APP_BACKEND_URL_INTERNAL: "http://backend-service:8000"
  REACT_APP_BACKEND_URL_EXTERNAL: "http://192.168.49.2:30080"

############################################
# Frontend Deployment & Service
############################################
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: 1234suhas/frotend-333:latest
          ports:
            - containerPort: 80
          env:
            - name: REACT_APP_BACKEND_URL
              valueFrom:
                configMapKeyRef:
                  name: frontend-config
                  key: REACT_APP_BACKEND_URL_EXTERNAL
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 10
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30000
  type: NodePort
